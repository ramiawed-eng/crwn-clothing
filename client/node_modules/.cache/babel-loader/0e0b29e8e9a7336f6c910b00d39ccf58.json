{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: 'AIzaSyBm_nZhqenvkwP_N-p8suEFjkOHU00R92A',\n  authDomain: 'crwn-db-11e2b.firebaseapp.com',\n  databaseURL: 'https://crwn-db-11e2b.firebaseio.com',\n  projectId: 'crwn-db-11e2b',\n  storageBucket: 'crwn-db-11e2b.appspot.com',\n  messagingSenderId: '653188101886',\n  appId: '1:653188101886:web:9bfa361c6b78c269c097af',\n  measurementId: 'G-5YEJRYGHGZ'\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return; // console.log(firestore.doc('users/128dfdfdfe'));\n  //console.log(firestore.doc('user/123jsdsdj23'));\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const collectionRef = firestore.collection(`users`);\n  const snapShot = await userRef.get();\n  const collectionSnapshot = await collectionRef.get();\n  console.log({\n    collections: collectionSnapshot.docs.map(collection => collection.data())\n  });\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (err) {\n      console.log('error creating user', err.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // google authentication\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/Rami/Desktop/github/Repositories/crwn-clothing/src/firebase/firebase.util.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","collectionRef","collection","snapShot","get","collectionSnapshot","console","log","collections","docs","map","data","exists","displayName","email","createdAt","Date","set","err","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,+BAFC;AAGbC,EAAAA,WAAW,EAAE,sCAHA;AAIbC,EAAAA,SAAS,EAAE,eAJE;AAKbC,EAAAA,aAAa,EAAE,2BALF;AAMbC,EAAAA,iBAAiB,EAAE,cANN;AAObC,EAAAA,KAAK,EAAE,2CAPM;AAQbC,EAAAA,aAAa,EAAE;AARF,CAAf;AAWA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe,OAD4D,CAE3E;AAEA;;AAEA,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AACA,QAAMC,aAAa,GAAGH,SAAS,CAACI,UAAV,CAAsB,OAAtB,CAAtB;AAEA,QAAMC,QAAQ,GAAG,MAAMN,OAAO,CAACO,GAAR,EAAvB;AACA,QAAMC,kBAAkB,GAAG,MAAMJ,aAAa,CAACG,GAAd,EAAjC;AAEAE,EAAAA,OAAO,CAACC,GAAR,CAAY;AACVC,IAAAA,WAAW,EAAEH,kBAAkB,CAACI,IAAnB,CAAwBC,GAAxB,CAA6BR,UAAD,IAAgBA,UAAU,CAACS,IAAX,EAA5C;AADH,GAAZ;;AAIA,MAAI,CAACR,QAAQ,CAACS,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBnB,QAA/B;AACA,UAAMoB,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACF,YAAMnB,OAAO,CAACoB,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGnB;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOsB,GAAP,EAAY;AACZZ,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCW,GAAG,CAACC,OAAvC;AACD;AACF;;AACD,SAAOtB,OAAP;AACD,CAhCM;AAkCPb,QAAQ,CAACoC,aAAT,CAAuBnC,MAAvB;AAEA,OAAO,MAAMoC,IAAI,GAAGrC,QAAQ,CAACqC,IAAT,EAAb;AACP,OAAO,MAAMvB,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB,C,CAEP;;AACA,MAAMwB,QAAQ,GAAG,IAAItC,QAAQ,CAACqC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAetC,QAAf","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n  apiKey: 'AIzaSyBm_nZhqenvkwP_N-p8suEFjkOHU00R92A',\r\n  authDomain: 'crwn-db-11e2b.firebaseapp.com',\r\n  databaseURL: 'https://crwn-db-11e2b.firebaseio.com',\r\n  projectId: 'crwn-db-11e2b',\r\n  storageBucket: 'crwn-db-11e2b.appspot.com',\r\n  messagingSenderId: '653188101886',\r\n  appId: '1:653188101886:web:9bfa361c6b78c269c097af',\r\n  measurementId: 'G-5YEJRYGHGZ',\r\n};\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n  if (!userAuth) return;\r\n  // console.log(firestore.doc('users/128dfdfdfe'));\r\n\r\n  //console.log(firestore.doc('user/123jsdsdj23'));\r\n\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n  const collectionRef = firestore.collection(`users`);\r\n\r\n  const snapShot = await userRef.get();\r\n  const collectionSnapshot = await collectionRef.get();\r\n\r\n  console.log({\r\n    collections: collectionSnapshot.docs.map((collection) => collection.data()),\r\n  });\r\n\r\n  if (!snapShot.exists) {\r\n    const { displayName, email } = userAuth;\r\n    const createdAt = new Date();\r\n\r\n    try {\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...additionalData,\r\n      });\r\n    } catch (err) {\r\n      console.log('error creating user', err.message);\r\n    }\r\n  }\r\n  return userRef;\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\n// google authentication\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters({ prompt: 'select_account' });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}