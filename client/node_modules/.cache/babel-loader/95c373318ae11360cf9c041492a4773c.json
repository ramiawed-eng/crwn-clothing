{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rami\\\\Desktop\\\\github\\\\Repositories\\\\crwn-clothing\\\\src\\\\pages\\\\shop\\\\shop.component.jsx\";\nimport React, { useEffect } from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { fetchColllectionsStart } from '../../redux/shop/shop.action';\nimport { selectIsCollectionFetching, selectIsCollectionsLoaded } from '../../redux/shop/shop.selectors';\nimport WithSpinner from '../../components/with-spinner/with-spinner.components';\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\nimport CollectionPage from '../collection/collection.component';\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage); // asynchronous component without redux-thunk\n// class ShopPage extends React.Component {\n//   state = { loading: true };\n//   unsubscribeFromSnapshot = null;\n//   componentDidMount() {\n//     const { updateCollections } = this.props;\n//     const collectionRef = firestore.collection('collections');\n//     // use promise pattern\n//     collectionRef.get().then((snapshot) => {\n//       const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n//       updateCollections(collectionsMap);\n//       this.setState({ loading: false });\n//     });\n//     // user observable and observer pattern\n//     // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\n//     //   async (snapshot) => {\n//     //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n//     //     updateCollections(collectionsMap);\n//     //     this.setState({ loading: false });\n//     //   }\n//     // );\n//   }\n//   render() {\n//     const { match } = this.props;\n//     const { loading } = this.state;\n//     return (\n//       <div className='shop-page'>\n//         <Route\n//           exact\n//           path={`${match.path}`}\n//           render={(props) => (\n//             <CollectionsOverviewWithSpinner isLoading={loading} {...props} />\n//           )}\n//         />\n//         <Route\n//           path={`${match.path}/:collectionId`}\n//           render={(props) => (\n//             <CollectionPageWithSpinner isLoading={loading} {...props} />\n//           )}\n//         />\n//       </div>\n//     );\n//   }\n// }\n// const mapDispatchToProps = (dispatch) => ({\n//   updateCollections: (collectionsMap) =>\n//     dispatch(updateCollections(collectionsMap)),\n// });\n// asynchronous component with redux-thunk\n\nconst ShopPage = ({\n  fetchColllectionsStart,\n  match,\n  isCollectionFetching,\n  isCollectionsLoaded\n}) => {\n  useEffect(() => {\n    fetchColllectionsStart();\n  }, [fetchColllectionsStart]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"shop-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: `${match.path}`,\n    render: props => /*#__PURE__*/React.createElement(CollectionsOverviewWithSpinner, Object.assign({\n      isLoading: isCollectionFetching\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: `${match.path}/:collectionId`,\n    render: props => /*#__PURE__*/React.createElement(CollectionPageWithSpinner, Object.assign({\n      isLoading: !isCollectionsLoaded\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching,\n  isCollectionsLoaded: selectIsCollectionsLoaded\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchColllectionsStart: () => dispatch(fetchColllectionsStart())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["C:/Users/Rami/Desktop/github/Repositories/crwn-clothing/src/pages/shop/shop.component.jsx"],"names":["React","useEffect","Route","connect","createStructuredSelector","fetchColllectionsStart","selectIsCollectionFetching","selectIsCollectionsLoaded","WithSpinner","CollectionsOverview","CollectionPage","CollectionsOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","match","isCollectionFetching","isCollectionsLoaded","path","props","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AAEA,SAASC,sBAAT,QAAuC,8BAAvC;AACA,SACEC,0BADF,EAEEC,yBAFF,QAGO,iCAHP;AAKA,OAAOC,WAAP,MAAwB,uDAAxB;AACA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AAEA,MAAMC,8BAA8B,GAAGH,WAAW,CAACC,mBAAD,CAAlD;AACA,MAAMG,yBAAyB,GAAGJ,WAAW,CAACE,cAAD,CAA7C,C,CAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMG,QAAQ,GAAG,CAAC;AAChBR,EAAAA,sBADgB;AAEhBS,EAAAA,KAFgB;AAGhBC,EAAAA,oBAHgB;AAIhBC,EAAAA;AAJgB,CAAD,KAKX;AACJf,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,sBAAsB;AACvB,GAFQ,EAEN,CAACA,sBAAD,CAFM,CAAT;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AACE,IAAA,KAAK,MADP;AAEE,IAAA,IAAI,EAAG,GAAES,KAAK,CAACG,IAAK,EAFtB;AAGE,IAAA,MAAM,EAAGC,KAAD,iBACN,oBAAC,8BAAD;AACE,MAAA,SAAS,EAAEH;AADb,OAEMG,KAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAWE,oBAAC,KAAD;AACE,IAAA,IAAI,EAAG,GAAEJ,KAAK,CAACG,IAAK,gBADtB;AAEE,IAAA,MAAM,EAAGC,KAAD,iBACN,oBAAC,yBAAD;AACE,MAAA,SAAS,EAAE,CAACF;AADd,OAEME,KAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,CADF;AAuBD,CAjCD;;AAmCA,MAAMC,eAAe,GAAGf,wBAAwB,CAAC;AAC/CW,EAAAA,oBAAoB,EAAET,0BADyB;AAE/CU,EAAAA,mBAAmB,EAAET;AAF0B,CAAD,CAAhD;;AAKA,MAAMa,kBAAkB,GAAIC,QAAD,KAAe;AACxChB,EAAAA,sBAAsB,EAAE,MAAMgB,QAAQ,CAAChB,sBAAsB,EAAvB;AADE,CAAf,CAA3B;;AAIA,eAAeF,OAAO,CAACgB,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CP,QAA7C,CAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport { fetchColllectionsStart } from '../../redux/shop/shop.action';\r\nimport {\r\n  selectIsCollectionFetching,\r\n  selectIsCollectionsLoaded,\r\n} from '../../redux/shop/shop.selectors';\r\n\r\nimport WithSpinner from '../../components/with-spinner/with-spinner.components';\r\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\r\nimport CollectionPage from '../collection/collection.component';\r\n\r\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\r\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\r\n\r\n// asynchronous component without redux-thunk\r\n\r\n// class ShopPage extends React.Component {\r\n//   state = { loading: true };\r\n//   unsubscribeFromSnapshot = null;\r\n\r\n//   componentDidMount() {\r\n//     const { updateCollections } = this.props;\r\n//     const collectionRef = firestore.collection('collections');\r\n\r\n//     // use promise pattern\r\n//     collectionRef.get().then((snapshot) => {\r\n//       const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n//       updateCollections(collectionsMap);\r\n//       this.setState({ loading: false });\r\n//     });\r\n\r\n//     // user observable and observer pattern\r\n//     // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\r\n//     //   async (snapshot) => {\r\n//     //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n//     //     updateCollections(collectionsMap);\r\n//     //     this.setState({ loading: false });\r\n//     //   }\r\n//     // );\r\n//   }\r\n\r\n//   render() {\r\n//     const { match } = this.props;\r\n//     const { loading } = this.state;\r\n//     return (\r\n//       <div className='shop-page'>\r\n//         <Route\r\n//           exact\r\n//           path={`${match.path}`}\r\n//           render={(props) => (\r\n//             <CollectionsOverviewWithSpinner isLoading={loading} {...props} />\r\n//           )}\r\n//         />\r\n//         <Route\r\n//           path={`${match.path}/:collectionId`}\r\n//           render={(props) => (\r\n//             <CollectionPageWithSpinner isLoading={loading} {...props} />\r\n//           )}\r\n//         />\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   updateCollections: (collectionsMap) =>\r\n//     dispatch(updateCollections(collectionsMap)),\r\n// });\r\n// asynchronous component with redux-thunk\r\nconst ShopPage = ({\r\n  fetchColllectionsStart,\r\n  match,\r\n  isCollectionFetching,\r\n  isCollectionsLoaded,\r\n}) => {\r\n  useEffect(() => {\r\n    fetchColllectionsStart();\r\n  }, [fetchColllectionsStart]);\r\n\r\n  return (\r\n    <div className='shop-page'>\r\n      <Route\r\n        exact\r\n        path={`${match.path}`}\r\n        render={(props) => (\r\n          <CollectionsOverviewWithSpinner\r\n            isLoading={isCollectionFetching}\r\n            {...props}\r\n          />\r\n        )}\r\n      />\r\n      <Route\r\n        path={`${match.path}/:collectionId`}\r\n        render={(props) => (\r\n          <CollectionPageWithSpinner\r\n            isLoading={!isCollectionsLoaded}\r\n            {...props}\r\n          />\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  isCollectionFetching: selectIsCollectionFetching,\r\n  isCollectionsLoaded: selectIsCollectionsLoaded,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  fetchColllectionsStart: () => dispatch(fetchColllectionsStart()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);\r\n"]},"metadata":{},"sourceType":"module"}