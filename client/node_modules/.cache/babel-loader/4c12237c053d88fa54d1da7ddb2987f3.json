{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rami\\\\Desktop\\\\github\\\\Repositories\\\\crwn-clothing\\\\src\\\\pages\\\\shop\\\\shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { convertCollectionsSnapshotToMap, firestore } from '../../firebase/firebase.util';\nimport { fetchCollectionStart } from '../../redux/shop/shop.action';\nimport { selectIsCollectionFetching, selectIsCollectionsLoaded } from '../../redux/shop/shop.selectors';\nimport WithSpinner from '../../components/with-spinner/with-spinner.components';\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\nimport { updateCollections } from '../../redux/shop/shop.action';\nimport CollectionPage from '../collection/collection.component';\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage); // asynchronous component without redux-thunk\n// class ShopPage extends React.Component {\n//   state = { loading: true };\n//   unsubscribeFromSnapshot = null;\n//   componentDidMount() {\n//     const { updateCollections } = this.props;\n//     const collectionRef = firestore.collection('collections');\n//     // use promise pattern\n//     collectionRef.get().then((snapshot) => {\n//       const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n//       updateCollections(collectionsMap);\n//       this.setState({ loading: false });\n//     });\n//     // user observable and observer pattern\n//     // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\n//     //   async (snapshot) => {\n//     //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n//     //     updateCollections(collectionsMap);\n//     //     this.setState({ loading: false });\n//     //   }\n//     // );\n//   }\n//   render() {\n//     const { match } = this.props;\n//     const { loading } = this.state;\n//     return (\n//       <div className='shop-page'>\n//         <Route\n//           exact\n//           path={`${match.path}`}\n//           render={(props) => (\n//             <CollectionsOverviewWithSpinner isLoading={loading} {...props} />\n//           )}\n//         />\n//         <Route\n//           path={`${match.path}/:collectionId`}\n//           render={(props) => (\n//             <CollectionPageWithSpinner isLoading={loading} {...props} />\n//           )}\n//         />\n//       </div>\n//     );\n//   }\n// }\n// const mapDispatchToProps = (dispatch) => ({\n//   updateCollections: (collectionsMap) =>\n//     dispatch(updateCollections(collectionsMap)),\n// });\n// asynchronous component with redux-thunk\n\nclass ShopPage extends React.Component {\n  componentDidMount() {\n    const {\n      fetchCollectionStart\n    } = this.props;\n    fetchCollectionStart();\n  }\n\n  render() {\n    const {\n      match,\n      isCollectionFetching,\n      isCollectionsLoaded\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"shop-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: props => /*#__PURE__*/React.createElement(CollectionsOverviewWithSpinner, Object.assign({\n        isLoading: isCollectionFetching\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: `${match.path}/:collectionId`,\n      render: props => /*#__PURE__*/React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: !isCollectionsLoaded\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching,\n  isCollectionsLoaded: selectIsCollectionsLoaded\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionStart: () => dispatch(fetchCollectionStart())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["C:/Users/Rami/Desktop/github/Repositories/crwn-clothing/src/pages/shop/shop.component.jsx"],"names":["React","Route","connect","createStructuredSelector","convertCollectionsSnapshotToMap","firestore","fetchCollectionStart","selectIsCollectionFetching","selectIsCollectionsLoaded","WithSpinner","CollectionsOverview","updateCollections","CollectionPage","CollectionsOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","componentDidMount","props","render","match","isCollectionFetching","isCollectionsLoaded","path","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SACEC,+BADF,EAEEC,SAFF,QAGO,8BAHP;AAKA,SAASC,oBAAT,QAAqC,8BAArC;AACA,SACEC,0BADF,EAEEC,yBAFF,QAGO,iCAHP;AAKA,OAAOC,WAAP,MAAwB,uDAAxB;AACA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AAEA,MAAMC,8BAA8B,GAAGJ,WAAW,CAACC,mBAAD,CAAlD;AACA,MAAMI,yBAAyB,GAAGL,WAAW,CAACG,cAAD,CAA7C,C,CAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMG,QAAN,SAAuBf,KAAK,CAACgB,SAA7B,CAAuC;AACrCC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEX,MAAAA;AAAF,QAA2B,KAAKY,KAAtC;AACAZ,IAAAA,oBAAoB;AACrB;;AAEDa,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,oBAAT;AAA+BC,MAAAA;AAA/B,QAAuD,KAAKJ,KAAlE;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,EAAG,GAAEE,KAAK,CAACG,IAAK,EAFtB;AAGE,MAAA,MAAM,EAAGL,KAAD,iBACN,oBAAC,8BAAD;AACE,QAAA,SAAS,EAAEG;AADb,SAEMH,KAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAWE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAG,GAAEE,KAAK,CAACG,IAAK,gBADtB;AAEE,MAAA,MAAM,EAAGL,KAAD,iBACN,oBAAC,yBAAD;AACE,QAAA,SAAS,EAAE,CAACI;AADd,SAEMJ,KAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,CADF;AAuBD;;AAhCoC;;AAmCvC,MAAMM,eAAe,GAAGrB,wBAAwB,CAAC;AAC/CkB,EAAAA,oBAAoB,EAAEd,0BADyB;AAE/Ce,EAAAA,mBAAmB,EAAEd;AAF0B,CAAD,CAAhD;;AAKA,MAAMiB,kBAAkB,GAAIC,QAAD,KAAe;AACxCpB,EAAAA,oBAAoB,EAAE,MAAMoB,QAAQ,CAACpB,oBAAoB,EAArB;AADI,CAAf,CAA3B;;AAIA,eAAeJ,OAAO,CAACsB,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CV,QAA7C,CAAf","sourcesContent":["import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport {\r\n  convertCollectionsSnapshotToMap,\r\n  firestore,\r\n} from '../../firebase/firebase.util';\r\n\r\nimport { fetchCollectionStart } from '../../redux/shop/shop.action';\r\nimport {\r\n  selectIsCollectionFetching,\r\n  selectIsCollectionsLoaded,\r\n} from '../../redux/shop/shop.selectors';\r\n\r\nimport WithSpinner from '../../components/with-spinner/with-spinner.components';\r\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\r\nimport { updateCollections } from '../../redux/shop/shop.action';\r\nimport CollectionPage from '../collection/collection.component';\r\n\r\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\r\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\r\n\r\n// asynchronous component without redux-thunk\r\n\r\n// class ShopPage extends React.Component {\r\n//   state = { loading: true };\r\n//   unsubscribeFromSnapshot = null;\r\n\r\n//   componentDidMount() {\r\n//     const { updateCollections } = this.props;\r\n//     const collectionRef = firestore.collection('collections');\r\n\r\n//     // use promise pattern\r\n//     collectionRef.get().then((snapshot) => {\r\n//       const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n//       updateCollections(collectionsMap);\r\n//       this.setState({ loading: false });\r\n//     });\r\n\r\n//     // user observable and observer pattern\r\n//     // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\r\n//     //   async (snapshot) => {\r\n//     //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n//     //     updateCollections(collectionsMap);\r\n//     //     this.setState({ loading: false });\r\n//     //   }\r\n//     // );\r\n//   }\r\n\r\n//   render() {\r\n//     const { match } = this.props;\r\n//     const { loading } = this.state;\r\n//     return (\r\n//       <div className='shop-page'>\r\n//         <Route\r\n//           exact\r\n//           path={`${match.path}`}\r\n//           render={(props) => (\r\n//             <CollectionsOverviewWithSpinner isLoading={loading} {...props} />\r\n//           )}\r\n//         />\r\n//         <Route\r\n//           path={`${match.path}/:collectionId`}\r\n//           render={(props) => (\r\n//             <CollectionPageWithSpinner isLoading={loading} {...props} />\r\n//           )}\r\n//         />\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   updateCollections: (collectionsMap) =>\r\n//     dispatch(updateCollections(collectionsMap)),\r\n// });\r\n// asynchronous component with redux-thunk\r\nclass ShopPage extends React.Component {\r\n  componentDidMount() {\r\n    const { fetchCollectionStart } = this.props;\r\n    fetchCollectionStart();\r\n  }\r\n\r\n  render() {\r\n    const { match, isCollectionFetching, isCollectionsLoaded } = this.props;\r\n\r\n    return (\r\n      <div className='shop-page'>\r\n        <Route\r\n          exact\r\n          path={`${match.path}`}\r\n          render={(props) => (\r\n            <CollectionsOverviewWithSpinner\r\n              isLoading={isCollectionFetching}\r\n              {...props}\r\n            />\r\n          )}\r\n        />\r\n        <Route\r\n          path={`${match.path}/:collectionId`}\r\n          render={(props) => (\r\n            <CollectionPageWithSpinner\r\n              isLoading={!isCollectionsLoaded}\r\n              {...props}\r\n            />\r\n          )}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  isCollectionFetching: selectIsCollectionFetching,\r\n  isCollectionsLoaded: selectIsCollectionsLoaded,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  fetchCollectionStart: () => dispatch(fetchCollectionStart()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);\r\n"]},"metadata":{},"sourceType":"module"}